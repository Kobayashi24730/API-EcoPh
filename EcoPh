import tkinter as tk
from tkinter import Tk, messagebox, filedialog
import requests
from matplotlib.figure import Figure
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import pandas as pd
import os


SENHA_ADMIN = "1234"
API_URL = "https://api-ecoph.onrender.com/obter"

# ---------------- Funções auxiliares ---------------- #

# Exportar dados para CSV
def exportar_csv():
    try:
        dados = buscar_dados()
        if not dados:
            messagebox.showwarning("Aviso", "Nenhum dado para exportar.")
            return

        caminho = filedialog.asksaveasfilename(defaultextension=".csv",
                                                filetypes=[("Arquivo CSV", "*.csv")],
                                                title="Salvar como")
        if caminho:
            df_export = pd.DataFrame(dados)
            df_export.to_csv(caminho, index=False)
            messagebox.showinfo("Sucesso", f"Dados exportados para:\n{caminho}")
    except Exception as e:
        messagebox.showerror("Erro", f"Erro ao exportar dados:\n{e}")

# Exibir estatísticas
def mostrar_estatisticas():
    try:
        if df.empty:
            messagebox.showwarning("Aviso", "Nenhum dado disponível.")
            return
        phs = df["ph"].astype(float)
        estat = (
            f"Média: {phs.mean():.2f}\n"
            f"Mínimo: {phs.min():.2f}\n"
            f"Máximo: {phs.max():.2f}\n"
            f"Quantidade: {len(phs)}"
        )
        messagebox.showinfo("Estatísticas do pH", estat)
    except Exception as e:
        messagebox.showerror("Erro", f"Erro ao calcular estatísticas:\n{e}")

# Alternar tema claro/escuro
tema_escuro = False
def alternar_tema():
    global tema_escuro
    tema_escuro = not tema_escuro
    cor_fundo = "#222222" if tema_escuro else "#f0f0f0"
    cor_texto = "white" if tema_escuro else "black"
    main_frame.config(bg=cor_fundo)
    right_frame.config(bg=cor_fundo)
    bottom_frame.config(bg=cor_fundo)
    listbox.config(bg=cor_fundo, fg=cor_texto)
    right_listbox.config(bg=cor_fundo, fg=cor_texto)

# Mostrar ajuda
def mostrar_ajuda():
    texto = (
        "Projeto EcoPH\n"
        "Monitoramento em tempo real dos níveis de pH da água.\n\n"
        "Desenvolvido para o programa Respostas para o Amanhã.\n"
        "Ideal para uso educacional e ambiental.\n\n"
        "Use 'Atualizar Dados' para buscar os dados e visualizar.\n"
        "Use o menu para exportar, ver estatísticas e mais."
    )
    messagebox.showinfo("Sobre o EcoPH", texto)

# ---------------- Funções principais ---------------- #
def buscar_dados():
    try:
        resp = requests.get(API_URL, timeout=5)
        resp.raise_for_status()
        dados = resp.json()
        global df
        df = pd.DataFrame(dados)
        return resp.json()[::-1]
    except Exception as e:
        print("Erro ao buscar dados:", e)
        return []

def verificar_risco(ph):
    info = []
    if ph < 5.0:
        info.append("[Alerta] pH muito ácido! Pode causar queimaduras na pele e morte de peixes.")
    elif ph < 6.5:
        info.append("[Alerta] pH levemente ácido. Pode prejudicar plantas aquáticas.")
    elif ph > 8.5:
        info.append("[Alerta] pH muito alcalino! Pode causar irritações na pele e morte de organismos.")
    return info

def sugestoes_para_ph(ph):
    if ph < 7.0:
        return ["[Sugestao] Adicionar bicarbonato de sódio", "[Sugestao] Usar calcário agrícola", "[Sugestao] Reduzir fontes de poluição ácida"]
    elif ph > 7.0:
        return ["[Sugestao] Adicionar vinagre ou ácido cítrico", "[Sugestao] Plantar vegetação que absorve alcalinidade", "[Sugestao] Monitorar despejos de soda cáustica"]
    else:
        return ["[Sugestao] pH está neutro. Sem ação necessária."]

def mostrar_dados_sequencial(dados, i=0, valores=None, tempos=None):
    if valores is None: valores = []
    if tempos is None: tempos = []

    if i < len(dados):
        d = dados[i]
        ph = float(d.get("ph", 7.0))
        horario = d.get("horario")
        valores.append(ph)
        tempos.append(horario.split(" ")[1])
        listbox.insert(tk.END, f"pH: {ph:.2f}  |  {horario}")

        riscos = verificar_risco(ph)
        if riscos:
            messagebox.showwarning("Alerta de Risco!", "\n".join(riscos))

        ax.clear()
        ax.set_title("Variação do pH", fontsize=14)
        ax.set_ylabel("pH", fontsize=12)
        ax.set_xlabel("Hora", fontsize=12)
        ax.grid(True)
        ax.plot(tempos, valores, marker='o', color='blue')
        ax.tick_params(axis='x', rotation=45)
        fig.tight_layout()
        canvas.draw()

        right_listbox.delete(0, tk.END)
        right_listbox.insert(tk.END, ">> Efeitos e Soluções <<")
        for r in verificar_risco(ph):
            right_listbox.insert(tk.END, f"- {r}")
        for s in sugestoes_para_ph(ph):
            right_listbox.insert(tk.END, f"* {s}")

        app.after(2000, lambda: mostrar_dados_sequencial(dados, i+1, valores, tempos))

    else:
        # Ao terminar os 20 dados, busca novamente e reinicia visualização
        novos_dados = buscar_dados()
        if novos_dados:
            listbox.insert(tk.END, "=== Atualizando dados... ===")
            app.after(2000, lambda: mostrar_dados_sequencial(novos_dados))

def iniciar_visualizacao():
    dados = buscar_dados()

    if len(dados) < 20:
        listbox.delete(0, tk.END)
        listbox.insert(tk.END, f"Aguardando mais dados... ({len(dados)}/20)")
        app.after(1000, iniciar_visualizacao)  # Verifica de novo após 1s
        return  # <-- IMPORTANTE: Impede execução do restante

    # Se chegou aqui, tem pelo menos 20 dados
    listbox.delete(0, tk.END)
    ax.clear()
    canvas.draw()

    mostrar_dados_sequencial(dados)
    
# ---------------- NOVAS FUNÇÕES: Administração e Histórico ---------------- #


def abrir_historico():
    try:
        dados = buscar_dados()
        if not dados:
            messagebox.showwarning("Aviso", "Nenhum dado disponível.")
            return

        janela_hist = tk.Toplevel(app)
        janela_hist.title("Histórico de Dados")
        janela_hist.geometry("600x400")

        frame_tabela = tk.Frame(janela_hist)
        frame_tabela.pack(fill=tk.BOTH, expand=True)

        tabela = tk.Text(frame_tabela, font=("Courier", 10))
        tabela.pack(fill=tk.BOTH, expand=True)

        # Cabeçalho
        tabela.insert(tk.END, f"{'ID':<6}{'Horário':<25}{'pH':<5}\n")
        tabela.insert(tk.END, "-" * 50 + "\n")

        for i, d in enumerate(dados[::-1]):  # mais recente em cima
            ph = d.get("ph", "N/A")
            horario = d.get("horario", "N/A")
            tabela.insert(tk.END, f"{i:<6}{horario:<25}{ph:<5}\n")

        tabela.config(state=tk.DISABLED)
    except Exception as e:
        messagebox.showerror("Erro", f"Erro ao abrir histórico:\n{e}")


def abrir_administracao():
    # Tela de login simples para senha
    def verificar_senha():
        senha = entrada_senha.get()
        if senha == SENHA_ADMIN:
            janela_login.destroy()
            abrir_painel_admin()
        else:
            messagebox.showerror("Erro", "Senha incorreta!")

    janela_login = tk.Toplevel(app)
    janela_login.title("Login Admin")
    janela_login.geometry("300x120")
    janela_login.resizable(False, False)

    tk.Label(janela_login, text="Digite a senha de admin:").pack(pady=10)
    entrada_senha = tk.Entry(janela_login, show="*")
    entrada_senha.pack(pady=5)
    btn_entrar = tk.Button(janela_login, text="Entrar", command=verificar_senha)
    btn_entrar.pack(pady=5)

def abrir_painel_admin():
    dados = buscar_dados()
    if not dados:
        messagebox.showwarning("Aviso", "Nenhum dado disponível.")
        return

    admin_win = tk.Toplevel(app)
    admin_win.title("Painel Administrativo")
    admin_win.geometry("800x600")

    # Frame de filtro
    filtro_frame = tk.Frame(admin_win)
    filtro_frame.pack(pady=10)

    tk.Label(filtro_frame, text="pH mínimo:").grid(row=0, column=0, padx=5)
    ph_min_entry = tk.Entry(filtro_frame, width=10)
    ph_min_entry.grid(row=0, column=1, padx=5)
    ph_min_entry.insert(0, "0")

    tk.Label(filtro_frame, text="pH máximo:").grid(row=0, column=2, padx=5)
    ph_max_entry = tk.Entry(filtro_frame, width=10)
    ph_max_entry.grid(row=0, column=3, padx=5)
    ph_max_entry.insert(0, "14")

    var_fora_padrao = tk.IntVar()
    chk_fora_padrao = tk.Checkbutton(filtro_frame, text="Exibir só registros fora do padrão (pH < 6.0 ou > 9.0)", variable=var_fora_padrao)
    chk_fora_padrao.grid(row=1, column=0, columnspan=4, pady=5)

    btn_filtrar = tk.Button(filtro_frame, text="Aplicar Filtro")
    btn_filtrar.grid(row=2, column=0, columnspan=4, pady=5)

    # Lista dos dados filtrados
    lista_dados = tk.Listbox(admin_win, font=("Courier", 10))
    lista_dados.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

    # Frame para resumo estatístico e botões
    resumo_frame = tk.Frame(admin_win)
    resumo_frame.pack(fill=tk.X, padx=10)

    lbl_resumo = tk.Label(resumo_frame, text="Resumo estatístico:")
    lbl_resumo.pack(side=tk.LEFT)

    btn_exportar_filtrado = tk.Button(resumo_frame, text="Exportar dados filtrados CSV")
    btn_exportar_filtrado.pack(side=tk.RIGHT, padx=5)

    # Gráfico do filtro
    fig_admin = Figure(figsize=(6, 3), dpi=100)
    ax_admin = fig_admin.add_subplot(111)
    canvas_admin = FigureCanvasTkAgg(fig_admin, master=admin_win)
    canvas_admin.get_tk_widget().pack(fill=tk.BOTH, expand=False, padx=10, pady=5)

    # Função para aplicar filtro e atualizar a lista e gráfico
    def aplicar_filtro():
        try:
            ph_min = float(ph_min_entry.get())
            ph_max = float(ph_max_entry.get())
            mostrar_fora_padrao = var_fora_padrao.get() == 1
        except ValueError:
            messagebox.showerror("Erro", "Valores de pH inválidos.")
            return

        filtrados = []
        for d in dados:
            try:
                ph_val = float(d.get("ph", 7))
            except:
                ph_val = 7
            if mostrar_fora_padrao:
                if ph_val < 6.0 or ph_val > 9.0:
                    filtrados.append(d)
            else:
                if ph_min <= ph_val <= ph_max:
                    filtrados.append(d)

        lista_dados.delete(0, tk.END)
        phs_filtrados = []
        horarios_filtrados = []

        for i, d in enumerate(filtrados[::-1]):  # mostra do mais recente ao mais antigo
            ph_val = d.get("ph", "N/A")
            horario = d.get("horario", "N/A")
            lista_dados.insert(tk.END, f"{i:<5} {horario:<25} pH: {ph_val}")
            try:
                phs_filtrados.append(float(ph_val))
                horarios_filtrados.append(horario.split(" ")[1])  # só hora
            except:
                pass

        if phs_filtrados:
            media = sum(phs_filtrados) / len(phs_filtrados)
            minimo = min(phs_filtrados)
            maximo = max(phs_filtrados)
            total = len(phs_filtrados)
            lbl_resumo.config(text=f"Resumo estatístico: Média={media:.2f} | Min={minimo:.2f} | Max={maximo:.2f} | Total={total}")
        else:
            lbl_resumo.config(text="Resumo estatístico: Nenhum dado para mostrar.")

        # Atualiza gráfico
        ax_admin.clear()
        ax_admin.set_title("Gráfico pH filtrado")
        ax_admin.set_xlabel("Hora")
        ax_admin.set_ylabel("pH")
        ax_admin.grid(True)
        ax_admin.plot(horarios_filtrados, phs_filtrados, marker='o', color='green')
        ax_admin.tick_params(axis='x', rotation=45)
        fig_admin.tight_layout()
        canvas_admin.draw()

        # Guardar dados filtrados para exportar
        admin_win.filtrados = filtrados

    def exportar_filtrados_csv():
        try:
            if not hasattr(admin_win, 'filtrados') or not admin_win.filtrados:
                messagebox.showwarning("Aviso", "Nenhum dado filtrado para exportar.")
                return
            caminho = filedialog.asksaveasfilename(defaultextension=".csv",
                                                    filetypes=[("Arquivo CSV", "*.csv")],
                                                    title="Salvar dados filtrados como")
            if caminho:
                df_exp = pd.DataFrame(admin_win.filtrados)
                df_exp.to_csv(caminho, index=False)
                messagebox.showinfo("Sucesso", f"Dados exportados para:\n{caminho}")
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao exportar dados filtrados:\n{e}")

    btn_filtrar.config(command=aplicar_filtro)
    btn_exportar_filtrado.config(command=exportar_filtrados_csv)

    # Chama filtro inicial para mostrar todos os dados
    aplicar_filtro()

# ---------------- Interface Gráfica ---------------- #

app = Tk()
app.title("Monitor de pH Online")
app.geometry("1500x700")

# Menu
barra_menu = tk.Menu(app)

# Menu principal
menu_infos = tk.Menu(barra_menu, tearoff=0)
menu_infos.add_command(label="Administração", command=abrir_administracao)
menu_infos.add_command(label="Histórico de dados", command=abrir_administracao)
menu_infos.delete(1)  # remove placeholder do histórico
menu_infos.add_command(label="Histórico de dados", command=abrir_historico)
barra_menu.add_cascade(label="Menu", menu=menu_infos)

# Exportar
menu_exportar = tk.Menu(barra_menu, tearoff=0)
menu_exportar.add_command(label="Exportar para CSV", command=exportar_csv)
barra_menu.add_cascade(label="Exportar", menu=menu_exportar)

# Visualizar
menu_visualizar = tk.Menu(barra_menu, tearoff=0)
menu_visualizar.add_command(label="Ver Estatísticas", command=mostrar_estatisticas)
menu_visualizar.add_command(label="Alternar Tema Claro/Escuro", command=alternar_tema)
barra_menu.add_cascade(label="Visualizar", menu=menu_visualizar)

# Ajuda
menu_ajuda = tk.Menu(barra_menu, tearoff=0)
menu_ajuda.add_command(label="Sobre o Projeto", command=mostrar_ajuda)
barra_menu.add_cascade(label="Ajuda", menu=menu_ajuda)

app.config(menu=barra_menu)

# Frame principal
main_frame = tk.Frame(app, bg="#f0f0f0", bd=2, relief="groove")
main_frame.place(x=10, y=10, width=1000, height=500)

tk.Label(main_frame, text="Gráfico", font=("Arial", 14, "bold")).place(x=10, y=10)
fig = Figure(figsize=(5, 3), dpi=100)
ax = fig.add_subplot(111)
canvas = FigureCanvasTkAgg(fig, master=main_frame)
canvas.draw()
canvas.get_tk_widget().place(x=10, y=40, width=600, height=400)

tk.Label(main_frame, text="Tabela", font=("Arial", 14, "bold")).place(x=630, y=10)
scrollbar = tk.Scrollbar(main_frame)
scrollbar.place(x=950, y=40, height=400)
listbox = tk.Listbox(main_frame, font=("Courier", 12))
listbox.place(x=630, y=40, width=320, height=400)
scrollbar.config(command=listbox.yview)

# Frame lateral direita
right_frame = tk.Frame(app, bg="#e0e0e0", bd=2, relief="groove")
right_frame.place(x=1020, y=10, width=460, height=500)
tk.Label(right_frame, text="Informações sobre o pH", font=("Arial", 14), wraplength=250).place(x=10, y=10)
right_listbox = tk.Listbox(right_frame, font=("Courier", 9))
right_listbox.place(x=10, y=50, width=440, height=420)

# Frame inferior
bottom_frame = tk.Frame(app, bg="#d0d0d0", bd=2, relief="sunken")
bottom_frame.place(x=10, y=520, width=1270, height=150)
btn_atualizar = tk.Button(bottom_frame, text="Atualizar Dados", font=("Arial", 12), command=iniciar_visualizacao)
btn_atualizar.place(x=20, y=20, width=150, height=40)

# Frame inferior direito
# Início automático
iniciar_visualizacao()
app.mainloop()
